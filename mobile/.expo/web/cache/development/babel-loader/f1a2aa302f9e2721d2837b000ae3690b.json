{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nexport default function TouchableItem(_ref) {\n  var _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    _ref$pressColor = _ref.pressColor,\n    pressColor = _ref$pressColor === void 0 ? 'rgba(0, 0, 0, .32)' : _ref$pressColor,\n    style = _ref.style,\n    children = _ref.children,\n    rest = _objectWithoutProperties(_ref, [\"borderless\", \"pressColor\", \"style\", \"children\"]);\n  if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n    return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n      useForeground: TouchableNativeFeedback.canUseNativeForeground(),\n      background: TouchableNativeFeedback.Ripple(pressColor, borderless)\n    }), React.createElement(View, {\n      style: style\n    }, React.Children.only(children)));\n  } else {\n    return React.createElement(TouchableOpacity, _extends({\n      style: style\n    }, rest), children);\n  }\n}","map":{"version":3,"sources":["TouchableItem.tsx"],"names":["React","ANDROID_VERSION_LOLLIPOP","TouchableItem","borderless","pressColor","style","children","rest","Platform","OS","Version","TouchableNativeFeedback","canUseNativeForeground","Ripple","Children","only"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAAA;AAkBA,IAAMC,wBAAwB,GAAG,EAAjC;AAEA,eAAe,SAASC,aAAT,CAAA,IAAA,EAML;EAAA,sBAAA,IAAA,CALRC,UAAU;IAAVA,UAAU,gCAAG,KADuB;IAAA,kBAM5B,IAAA,CAJRC,UAAU;IAAVA,UAAU,gCAAG,oBAFuB;IAGpCC,KAHoC,GAM5B,IAAA,CAHRA,KAHoC;IAIpCC,QAAAA,GAEQ,IAAA,CAFRA,QAAAA;IACGC,IACK,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,YAAA,EAAA,YAAA,EAAA,OAAA,EAAA,UAAA,CAAA,CAAA;EASR,IACEC,QAAQ,CAACC,EAATD,KAAgB,SAAhBA,IACAA,QAAQ,CAACE,OAATF,IAAoBP,wBAFtB,EAGE;IACA,OACE,KAAA,CAAA,aAAA,CAAC,uBAAD,EAAA,QAAA,CAAA,CAAA,CAAA,EACMM,IADN,EAAA;MAEE,aAAa,EAAEI,uBAAuB,CAACC,sBAAxBD,EAFjB;MAGE,UAAU,EAAEA,uBAAuB,CAACE,MAAxBF,CAA+BP,UAA/BO,EAA2CR,UAA3CQ;IAHd,CAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAC,IAAD,EAAA;MAAM,KAAK,EAAEN;IAAb,CAAA,EAAqBL,KAAK,CAACc,QAANd,CAAee,IAAff,CAAoBM,QAApBN,CAArB,CALF,CADF;EASD,CAbD,MAaO;IACL,OACE,KAAA,CAAA,aAAA,CAAC,gBAAD,EAAA,QAAA,CAAA;MAAkB,KAAK,EAAEK;IAAzB,CAAA,EAAoCE,IAApC,CAAA,EACGD,QADH,CADF;EAKD;AACF","sourcesContent":["/**\n * TouchableItem provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity to handle platform differences.\n *\n * On Android, you can pass the props of TouchableNativeFeedback.\n * On other platforms, you can pass the props of TouchableOpacity.\n */\nimport * as React from 'react';\nimport {\n  Platform,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  View,\n  ViewProps,\n} from 'react-native';\n\nexport type Props = ViewProps & {\n  pressColor?: string;\n  disabled?: boolean;\n  borderless?: boolean;\n  delayPressIn?: number;\n  onPress?: () => void;\n  children: React.ReactNode;\n};\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default function TouchableItem({\n  borderless = false,\n  pressColor = 'rgba(0, 0, 0, .32)',\n  style,\n  children,\n  ...rest\n}: Props) {\n  /*\n   * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n   * therefore only enable it on Android Lollipop and above.\n   *\n   * All touchables on Android should have the ripple effect according to\n   * platform design guidelines.\n   * We need to pass the background prop to specify a borderless ripple effect.\n   */\n  if (\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_LOLLIPOP\n  ) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        useForeground={TouchableNativeFeedback.canUseNativeForeground()}\n        background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n      >\n        <View style={style}>{React.Children.only(children)}</View>\n      </TouchableNativeFeedback>\n    );\n  } else {\n    return (\n      <TouchableOpacity style={style} {...rest}>\n        {children}\n      </TouchableOpacity>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}