{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error('Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.');\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error('Cannot use Notifications without permissions. Please request permissions with `expo-permissions`');\n  }\n}\nexport function getExponentPushTokenAsync() {\n  var data, experienceId, tokenArguments, response;\n  return _regeneratorRuntime.async(function getExponentPushTokenAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(!Constants.manifest.owner || !Constants.manifest.slug)) {\n            _context.next = 2;\n            break;\n          }\n          throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(_subscribeUserToPushAsync());\n        case 4:\n          data = _context.sent;\n          experienceId = \"@\" + Constants.manifest.owner + \"/\" + Constants.manifest.slug;\n          tokenArguments = {\n            deviceId: Constants.installationId,\n            experienceId: experienceId,\n            appId: experienceId,\n            deviceToken: JSON.stringify(data),\n            type: 'web'\n          };\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n            method: 'POST',\n            body: JSON.stringify(tokenArguments)\n          }).then(function (response) {\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n            return response;\n          }).then(function (response) {\n            return response.json();\n          }).catch(function (error) {\n            throw new CodedError('E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with Expo. (' + error + ')');\n          }));\n        case 9:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response.data.expoPushToken);\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getDevicePushTokenAsync() {\n  var data;\n  return _regeneratorRuntime.async(function getDevicePushTokenAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(_subscribeUserToPushAsync());\n        case 2:\n          data = _context2.sent;\n          return _context2.abrupt(\"return\", {\n            type: Platform.OS,\n            data: data\n          });\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction _subscribeUserToPushAsync() {\n  var registration, subscribeOptions, pushSubscription, pushSubscriptionJson, subscriptionObject, notificationIcon;\n  return _regeneratorRuntime.async(function _subscribeUserToPushAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!(!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey)) {\n            _context3.next = 2;\n            break;\n          }\n          throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG', 'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.');\n        case 2:\n          guardPermission();\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.register('/expo-service-worker.js'));\n        case 5:\n          registration = _context3.sent;\n          _context3.next = 8;\n          return _regeneratorRuntime.awrap(navigator.serviceWorker.ready);\n        case 8:\n          if (registration.active) {\n            _context3.next = 10;\n            break;\n          }\n          throw new Error('Notifications might not be working because the service worker API is not active.');\n        case 10:\n          subscribeOptions = {\n            userVisibleOnly: true,\n            applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey)\n          };\n          _context3.next = 13;\n          return _regeneratorRuntime.awrap(registration.pushManager.subscribe(subscribeOptions).catch(function (error) {\n            throw new CodedError('E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED', 'The device was unable to register for remote notifications with the browser endpoint. (' + error + ')');\n          }));\n        case 13:\n          pushSubscription = _context3.sent;\n          pushSubscriptionJson = pushSubscription.toJSON();\n          subscriptionObject = {\n            endpoint: pushSubscriptionJson.endpoint,\n            keys: {\n              p256dh: pushSubscriptionJson.keys.p256dh,\n              auth: pushSubscriptionJson.keys.auth\n            }\n          };\n          notificationIcon = (Constants.manifest.notification || {}).icon;\n          _context3.next = 19;\n          return _regeneratorRuntime.awrap(registration.active.postMessage(JSON.stringify({\n            fromExpoWebClient: {\n              notificationIcon: notificationIcon\n            }\n          })));\n        case 19:\n          return _context3.abrupt(\"return\", subscriptionObject);\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nfunction _urlBase64ToUint8Array(base64String) {\n  var padding = '='.repeat((4 - base64String.length % 4) % 4);\n  var base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  var rawData = window.atob(base64);\n  var outputArray = new Uint8Array(rawData.length);\n  for (var i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}","map":{"version":3,"sources":["../../src/Notifications/ExponentNotificationsHelper.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { Platform } from 'react-native';\n\nexport function guardPermission() {\n  if (!('Notification' in window)) {\n    throw new Error('The Notification API is not available on this device.');\n  }\n  if (!navigator.serviceWorker) {\n    throw new Error(\n      'Notifications cannot be used because the service worker API is not supported on this device. This might also happen because your web page does not support HTTPS.'\n    );\n  }\n  if (Notification.permission !== 'granted') {\n    throw new Error(\n      'Cannot use Notifications without permissions. Please request permissions with `expo-permissions`'\n    );\n  }\n}\n\nexport async function getExponentPushTokenAsync(): Promise<string> {\n  if (!Constants.manifest.owner || !Constants.manifest.slug) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `owner` and `slug` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n\n  const data = await _subscribeUserToPushAsync();\n  const experienceId = `@${Constants.manifest.owner}/${Constants.manifest.slug}`;\n  const tokenArguments: { [key: string]: string } = {\n    deviceId: Constants.installationId,\n    experienceId,\n    // Also uses `experienceId` for `appId` because there's no `appId` for web.\n    appId: experienceId,\n    deviceToken: JSON.stringify(data),\n    type: 'web',\n  };\n\n  const response = await fetch('https://exp.host/--/api/v2/push/getExpoPushToken', {\n    method: 'POST',\n    body: JSON.stringify(tokenArguments),\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => response.json())\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with Expo. (' + error + ')'\n      );\n    });\n\n  return response.data.expoPushToken;\n}\n\nexport async function getDevicePushTokenAsync(): Promise<{ type: string; data: object }> {\n  const data = await _subscribeUserToPushAsync();\n  return { type: Platform.OS, data };\n}\n\nasync function _subscribeUserToPushAsync(): Promise<object> {\n  if (!Constants.manifest.notification || !Constants.manifest.notification.vapidPublicKey) {\n    throw new CodedError(\n      'E_NOTIFICATIONS_PUSH_WEB_MISSING_CONFIG',\n      'You must provide `notification.vapidPublicKey` in `app.json` to use push notifications on web. Learn more: https://docs.expo.io/versions/latest/guides/using-vapid/.'\n    );\n  }\n  guardPermission();\n\n  const registration = await navigator.serviceWorker.register('/expo-service-worker.js');\n  await navigator.serviceWorker.ready;\n\n  if (!registration.active) {\n    throw new Error(\n      'Notifications might not be working because the service worker API is not active.'\n    );\n  }\n\n  const subscribeOptions = {\n    userVisibleOnly: true,\n    applicationServerKey: _urlBase64ToUint8Array(Constants.manifest.notification.vapidPublicKey),\n  };\n  const pushSubscription = await registration.pushManager\n    .subscribe(subscribeOptions)\n    .catch(error => {\n      throw new CodedError(\n        'E_NOTIFICATIONS_PUSH_WEB_TOKEN_REGISTRATION_FAILED',\n        'The device was unable to register for remote notifications with the browser endpoint. (' +\n          error +\n          ')'\n      );\n    });\n  const pushSubscriptionJson = pushSubscription.toJSON();\n\n  const subscriptionObject = {\n    endpoint: pushSubscriptionJson.endpoint,\n    keys: {\n      p256dh: pushSubscriptionJson.keys!.p256dh,\n      auth: pushSubscriptionJson.keys!.auth,\n    },\n  };\n\n  // Store notification icon string in service worker.\n  // This message is received by `/expo-service-worker.js`.\n  // We wrap it with `fromExpoWebClient` to make sure other message\n  // will not override content such as `notificationIcon`.\n  // https://stackoverflow.com/a/35729334/2603230\n  const notificationIcon = (Constants.manifest.notification || {}).icon;\n  await registration.active.postMessage(\n    JSON.stringify({ fromExpoWebClient: { notificationIcon } })\n  );\n\n  return subscriptionObject;\n}\n\n// https://github.com/web-push-libs/web-push#using-vapid-key-for-applicationserverkey\nfunction _urlBase64ToUint8Array(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}