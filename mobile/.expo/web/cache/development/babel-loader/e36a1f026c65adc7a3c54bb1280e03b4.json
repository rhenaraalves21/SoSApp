{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { NavigationContext, NavigationRouteContext, CommonActions, useTheme, useLinkBuilder } from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\nimport BottomTabItem from \"./BottomTabItem\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport useIsKeyboardShown from \"../utils/useIsKeyboardShown\";\nvar DEFAULT_TABBAR_HEIGHT = 49;\nvar DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nvar useNativeDriver = Platform.OS !== 'web';\nexport default function BottomTabBar(_ref) {\n  var state = _ref.state,\n    navigation = _ref.navigation,\n    descriptors = _ref.descriptors,\n    activeBackgroundColor = _ref.activeBackgroundColor,\n    activeTintColor = _ref.activeTintColor,\n    _ref$adaptive = _ref.adaptive,\n    adaptive = _ref$adaptive === void 0 ? true : _ref$adaptive,\n    allowFontScaling = _ref.allowFontScaling,\n    inactiveBackgroundColor = _ref.inactiveBackgroundColor,\n    inactiveTintColor = _ref.inactiveTintColor,\n    _ref$keyboardHidesTab = _ref.keyboardHidesTabBar,\n    keyboardHidesTabBar = _ref$keyboardHidesTab === void 0 ? false : _ref$keyboardHidesTab,\n    labelPosition = _ref.labelPosition,\n    labelStyle = _ref.labelStyle,\n    iconStyle = _ref.iconStyle,\n    safeAreaInsets = _ref.safeAreaInsets,\n    showLabel = _ref.showLabel,\n    style = _ref.style,\n    tabStyle = _ref.tabStyle;\n  var _safeAreaInsets$top, _safeAreaInsets$right, _safeAreaInsets$botto, _safeAreaInsets$left;\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var buildLink = useLinkBuilder();\n  var focusedRoute = state.routes[state.index];\n  var focusedDescriptor = descriptors[focusedRoute.key];\n  var focusedOptions = focusedDescriptor.options;\n  var dimensions = useWindowDimensions();\n  var isKeyboardShown = useIsKeyboardShown();\n  var shouldShowTabBar = focusedOptions.tabBarVisible !== false && !(keyboardHidesTabBar && isKeyboardShown);\n  var visibilityAnimationConfigRef = React.useRef(focusedOptions.tabBarVisibilityAnimationConfig);\n  React.useEffect(function () {\n    visibilityAnimationConfigRef.current = focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n  var _React$useState = React.useState(!shouldShowTabBar),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isTabBarHidden = _React$useState2[0],\n    setIsTabBarHidden = _React$useState2[1];\n  var _React$useState3 = React.useState(function () {\n      return new Animated.Value(shouldShowTabBar ? 1 : 0);\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 1),\n    visible = _React$useState4[0];\n  React.useEffect(function () {\n    var visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n    if (shouldShowTabBar) {\n      var _visibilityAnimationC, _visibilityAnimationC2;\n      var animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? Animated.spring : Animated.timing;\n      animation(visible, _objectSpread({\n        toValue: 1,\n        useNativeDriver: useNativeDriver,\n        duration: 250\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      var _visibilityAnimationC3, _visibilityAnimationC4;\n      setIsTabBarHidden(true);\n      var _animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? Animated.spring : Animated.timing;\n      _animation(visible, _objectSpread({\n        toValue: 0,\n        useNativeDriver: useNativeDriver,\n        duration: 200\n      }, visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)).start();\n    }\n  }, [visible, shouldShowTabBar]);\n  var _React$useState5 = React.useState({\n      height: 0,\n      width: dimensions.width\n    }),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    layout = _React$useState6[0],\n    setLayout = _React$useState6[1];\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height: height,\n          width: width\n        };\n      }\n    });\n  };\n  var routes = state.routes;\n  var shouldUseHorizontalLabels = function shouldUseHorizontalLabels() {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n    if (!adaptive) {\n      return false;\n    }\n    if (layout.width >= 768) {\n      var maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n      var flattenedStyle = StyleSheet.flatten(tabStyle);\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      var isLandscape = dimensions.width > dimensions.height;\n      return isLandscape;\n    }\n  };\n  var defaultInsets = useSafeArea();\n  var insets = {\n    top: (_safeAreaInsets$top = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _safeAreaInsets$top !== void 0 ? _safeAreaInsets$top : defaultInsets.top,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : defaultInsets.right,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : defaultInsets.bottom,\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : defaultInsets.left\n  };\n  var paddingBottom = Math.max(insets.bottom - Platform.select({\n    ios: 4,\n    default: 0\n  }), 0);\n  return React.createElement(Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: colors.card,\n      borderTopColor: colors.border\n    }, {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height + paddingBottom, 0]\n        })\n      }],\n      position: isTabBarHidden ? 'absolute' : null\n    }, {\n      height: DEFAULT_TABBAR_HEIGHT + paddingBottom,\n      paddingBottom: paddingBottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, style],\n    pointerEvents: isTabBarHidden ? 'none' : 'auto'\n  }, React.createElement(View, {\n    style: styles.content,\n    onLayout: handleLayout\n  }, routes.map(function (route, index) {\n    var focused = index === state.index;\n    var options = descriptors[route.key].options;\n    var onPress = function onPress() {\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, CommonActions.navigate(route.name)), {}, {\n          target: state.key\n        }));\n      }\n    };\n    var onLongPress = function onLongPress() {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n    var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    var accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n    return React.createElement(NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: route\n    }, React.createElement(BottomTabItem, {\n      route: route,\n      focused: focused,\n      horizontal: shouldUseHorizontalLabels(),\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      to: buildLink(route.name, route.params),\n      testID: options.tabBarTestID,\n      allowFontScaling: allowFontScaling,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: options.tabBarIcon,\n      badge: options.tabBarBadge,\n      label: label,\n      showLabel: showLabel,\n      labelStyle: labelStyle,\n      iconStyle: iconStyle,\n      style: tabStyle\n    })));\n  })));\n}\nvar styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["React","NavigationContext","NavigationRouteContext","CommonActions","useTheme","useLinkBuilder","useSafeArea","BottomTabItem","useWindowDimensions","useIsKeyboardShown","DEFAULT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","OS","BottomTabBar","state","navigation","descriptors","activeBackgroundColor","activeTintColor","adaptive","allowFontScaling","inactiveBackgroundColor","inactiveTintColor","keyboardHidesTabBar","labelPosition","labelStyle","iconStyle","safeAreaInsets","showLabel","style","tabStyle","colors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","dimensions","isKeyboardShown","shouldShowTabBar","tabBarVisible","visibilityAnimationConfigRef","useRef","tabBarVisibilityAnimationConfig","useEffect","current","isTabBarHidden","setIsTabBarHidden","useState","visible","Animated","Value","visibilityAnimationConfig","animation","show","spring","timing","toValue","duration","config","start","finished","hide","layout","setLayout","height","width","handleLayout","e","nativeEvent","shouldUseHorizontalLabels","maxTabItemWidth","flattenedStyle","StyleSheet","flatten","maxWidth","length","isLandscape","defaultInsets","insets","top","right","bottom","left","paddingBottom","max","select","ios","default","styles","tabBar","backgroundColor","card","borderTopColor","border","transform","translateY","interpolate","inputRange","outputRange","position","paddingHorizontal","Math","content","map","route","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","navigate","name","onLongPress","label","tabBarLabel","undefined","title","accessibilityLabel","tabBarAccessibilityLabel","params","tabBarTestID","tabBarButton","tabBarIcon","tabBarBadge","create","borderTopWidth","hairlineWidth","elevation","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Platform,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport type { BottomTabBarProps } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive = true,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  iconStyle,\n  safeAreaInsets,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const dimensions = useWindowDimensions();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    focusedOptions.tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current =\n      focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n  const shouldUseHorizontalLabels = () => {\n    if (labelPosition) {\n      return labelPosition === 'beside-icon';\n    }\n\n    if (!adaptive) {\n      return false;\n    }\n\n    if (layout.width >= 768) {\n      // Screen size matches a tablet\n      let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n      const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n      if (flattenedStyle) {\n        if (typeof flattenedStyle.width === 'number') {\n          maxTabItemWidth = flattenedStyle.width;\n        } else if (typeof flattenedStyle.maxWidth === 'number') {\n          maxTabItemWidth = flattenedStyle.maxWidth;\n        }\n      }\n\n      return routes.length * maxTabItemWidth <= layout.width;\n    } else {\n      const isLandscape = dimensions.width > dimensions.height;\n\n      return isLandscape;\n    }\n  };\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  const paddingBottom = Math.max(\n    insets.bottom - Platform.select({ ios: 4, default: 0 }),\n    0\n  );\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [layout.height + paddingBottom, 0],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: DEFAULT_TABBAR_HEIGHT + paddingBottom,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={shouldUseHorizontalLabels()}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  badge={options.tabBarBadge}\n                  label={label}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  iconStyle={iconStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}