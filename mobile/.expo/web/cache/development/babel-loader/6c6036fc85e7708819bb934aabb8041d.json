{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport SceneView from \"./SceneView\";\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nimport useNavigationCache from \"./useNavigationCache\";\nimport NavigationContext from \"./NavigationContext\";\nimport NavigationRouteContext from \"./NavigationRouteContext\";\nexport default function useDescriptors(_ref) {\n  var state = _ref.state,\n    screens = _ref.screens,\n    navigation = _ref.navigation,\n    screenOptions = _ref.screenOptions,\n    onAction = _ref.onAction,\n    getState = _ref.getState,\n    setState = _ref.setState,\n    addListener = _ref.addListener,\n    addKeyedListener = _ref.addKeyedListener,\n    onRouteFocus = _ref.onRouteFocus,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    options = _React$useState2[0],\n    setOptions = _React$useState2[1];\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    onDispatchAction = _React$useContext.onDispatchAction,\n    onOptionsChange = _React$useContext.onOptionsChange;\n  var context = React.useMemo(function () {\n    return {\n      navigation: navigation,\n      onAction: onAction,\n      addListener: addListener,\n      addKeyedListener: addKeyedListener,\n      onRouteFocus: onRouteFocus,\n      onDispatchAction: onDispatchAction,\n      onOptionsChange: onOptionsChange\n    };\n  }, [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange]);\n  var navigations = useNavigationCache({\n    state: state,\n    getState: getState,\n    navigation: navigation,\n    setOptions: setOptions,\n    router: router,\n    emitter: emitter\n  });\n  return state.routes.reduce(function (acc, route) {\n    var screen = screens[route.name];\n    var navigation = navigations[route.key];\n    var routeOptions = _objectSpread(_objectSpread(_objectSpread({}, typeof screenOptions === 'object' || screenOptions == null ? screenOptions : screenOptions({\n      route: route,\n      navigation: navigation\n    })), typeof screen.options === 'object' || screen.options == null ? screen.options : screen.options({\n      route: route,\n      navigation: navigation\n    })), options[route.key]);\n    acc[route.key] = {\n      navigation: navigation,\n      render: function render() {\n        return React.createElement(NavigationBuilderContext.Provider, {\n          key: route.key,\n          value: context\n        }, React.createElement(NavigationContext.Provider, {\n          value: navigation\n        }, React.createElement(NavigationRouteContext.Provider, {\n          value: route\n        }, React.createElement(SceneView, {\n          navigation: navigation,\n          route: route,\n          screen: screen,\n          getState: getState,\n          setState: setState,\n          options: routeOptions\n        }))));\n      },\n      options: routeOptions\n    };\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["useDescriptors.tsx"],"names":["React","SceneView","NavigationBuilderContext","useNavigationCache","NavigationContext","NavigationRouteContext","useDescriptors","state","screens","navigation","screenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","options","setOptions","useState","onDispatchAction","onOptionsChange","useContext","context","useMemo","navigations","routes","reduce","acc","route","screen","name","key","routeOptions","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport SceneView from './SceneView';\nimport NavigationBuilderContext, {\n  AddListener,\n  AddKeyedListener,\n} from './NavigationBuilderContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type {\n  Descriptor,\n  NavigationHelpers,\n  RouteConfig,\n  RouteProp,\n  EventMapBase,\n} from './types';\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase, string>;\n        navigation: any;\n      }) => ScreenOptions);\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<any>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  return state.routes.reduce<\n    Record<string, Descriptor<ParamListBase, string, State, ScreenOptions>>\n  >((acc, route) => {\n    const screen = screens[route.name];\n    const navigation = navigations[route.key];\n\n    const routeOptions = {\n      // The default `screenOptions` passed to the navigator\n      ...(typeof screenOptions === 'object' || screenOptions == null\n        ? screenOptions\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screenOptions({\n            route,\n            navigation,\n          })),\n      // The `options` prop passed to `Screen` elements\n      ...(typeof screen.options === 'object' || screen.options == null\n        ? screen.options\n        : // @ts-expect-error: this is a function, but typescript doesn't think so\n          screen.options({\n            route,\n            navigation,\n          })),\n      // The options set via `navigation.setOptions`\n      ...options[route.key],\n    };\n\n    acc[route.key] = {\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  getState={getState}\n                  setState={setState}\n                  options={routeOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: routeOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"module"}