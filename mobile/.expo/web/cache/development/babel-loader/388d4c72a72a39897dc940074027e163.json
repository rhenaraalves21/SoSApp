{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport * as SplashScreen from \"./SplashScreen\";\nvar AppLoading = function (_React$Component) {\n  _inherits(AppLoading, _React$Component);\n  var _super = _createSuper(AppLoading);\n  function AppLoading(props) {\n    var _this;\n    _classCallCheck(this, AppLoading);\n    _this = _super.call(this, props);\n    SplashScreen.preventAutoHide();\n    return _this;\n  }\n  _createClass(AppLoading, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.autoHideSplash === undefined || this.props.autoHideSplash) {\n        if (global.__E2E__) {\n          SplashScreen.hide();\n        } else {\n          setTimeout(function () {\n            SplashScreen.hide();\n          }, 200);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return AppLoading;\n}(React.Component);\nexport { AppLoading as default };","map":{"version":3,"sources":["../../src/launch/AppLoadingNativeWrapper.tsx"],"names":[],"mappings":";;;;;;;AAAA,OAAO,KAAK,MAAM,OAAO;AAEzB,OAAO,KAAK,YAAY;AAAuB,IAM1B,UAAW;EAAA;EAAA;EAC9B,oBAAY,KAAY,EAAA;IAAA;IAAA;IACtB,0BAAM,KAAK;IACX,YAAY,CAAC,eAAe,EAAE;IAAC;EACjC;EAAC;IAAA;IAAA,uCAEmB;MAClB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;QAExE,IAAI,MAAM,CAAC,OAAO,EAAE;UAClB,YAAY,CAAC,IAAI,EAAE;SACpB,MAAM;UACL,UAAU,CAAC,YAAK;YACd,YAAY,CAAC,IAAI,EAAE;UACrB,CAAC,EAAE,GAAG,CAAC;QACR;MACF;IACH;EAAC;IAAA;IAAA,yBAEK;MACJ,OAAO,IAAI;IACb;EAAC;EAAA;AAAA,EArBqC,KAAK,CAAC,SAAgB;AAAA,SAAzC,UAAW","sourcesContent":["import React from 'react';\n\nimport * as SplashScreen from './SplashScreen';\n\ntype Props = {\n  autoHideSplash?: boolean;\n};\n\nexport default class AppLoading extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    SplashScreen.preventAutoHide();\n  }\n\n  componentWillUnmount() {\n    if (this.props.autoHideSplash === undefined || this.props.autoHideSplash) {\n      // Hide immediately in E2E tests\n      if (global.__E2E__) {\n        SplashScreen.hide();\n      } else {\n        setTimeout(() => {\n          SplashScreen.hide();\n        }, 200);\n      }\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}