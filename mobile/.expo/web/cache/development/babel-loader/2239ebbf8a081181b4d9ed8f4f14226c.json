{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _deepAssign = _interopRequireDefault(require(\"deep-assign\"));\nvar mergeLocalStorageItem = function mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n  var oldObject = JSON.parse(oldValue);\n  var newObject = JSON.parse(value);\n  var nextValue = JSON.stringify((0, _deepAssign.default)({}, oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\nvar createPromise = function createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\nvar createPromiseAll = function createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var value = processResult ? processResult(result) : null;\n    callback && callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback && callback(errors);\n    return Promise.reject(errors);\n  });\n};\nvar AsyncStorage = function () {\n  function AsyncStorage() {\n    (0, _classCallCheck2.default)(this, AsyncStorage);\n  }\n  (0, _createClass2.default)(AsyncStorage, null, [{\n    key: \"getItem\",\n    value: function getItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.getItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value, callback) {\n      return createPromise(function () {\n        window.localStorage.setItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(key, callback) {\n      return createPromise(function () {\n        return window.localStorage.removeItem(key);\n      }, callback);\n    }\n  }, {\n    key: \"mergeItem\",\n    value: function mergeItem(key, value, callback) {\n      return createPromise(function () {\n        mergeLocalStorageItem(key, value);\n      }, callback);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear(callback) {\n      return createPromise(function () {\n        window.localStorage.clear();\n      }, callback);\n    }\n  }, {\n    key: \"getAllKeys\",\n    value: function getAllKeys(callback) {\n      return createPromise(function () {\n        var numberOfKeys = window.localStorage.length;\n        var keys = [];\n        for (var i = 0; i < numberOfKeys; i += 1) {\n          var key = window.localStorage.key(i);\n          keys.push(key);\n        }\n        return keys;\n      }, callback);\n    }\n  }, {\n    key: \"flushGetRequests\",\n    value: function flushGetRequests() {}\n  }, {\n    key: \"multiGet\",\n    value: function multiGet(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.getItem(key);\n      });\n      var processResult = function processResult(result) {\n        return result.map(function (value, i) {\n          return [keys[i], value];\n        });\n      };\n      return createPromiseAll(promises, callback, processResult);\n    }\n  }, {\n    key: \"multiSet\",\n    value: function multiSet(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.setItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiRemove\",\n    value: function multiRemove(keys, callback) {\n      var promises = keys.map(function (key) {\n        return AsyncStorage.removeItem(key);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }, {\n    key: \"multiMerge\",\n    value: function multiMerge(keyValuePairs, callback) {\n      var promises = keyValuePairs.map(function (item) {\n        return AsyncStorage.mergeItem(item[0], item[1]);\n      });\n      return createPromiseAll(promises, callback);\n    }\n  }]);\n  return AsyncStorage;\n}();\nexports.default = AsyncStorage;","map":{"version":3,"sources":["AsyncStorage.js"],"names":["mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","clear","numberOfKeys","length","keys","i","push","map","keyValuePairs","item","mergeItem"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport merge from 'deep-assign';\n\nconst mergeLocalStorageItem = (key, value) => {\n  const oldValue = window.localStorage.getItem(key);\n  const oldObject = JSON.parse(oldValue);\n  const newObject = JSON.parse(value);\n  const nextValue = JSON.stringify(merge({}, oldObject, newObject));\n  window.localStorage.setItem(key, nextValue);\n};\n\nconst createPromise = (getValue, callback): Promise<*> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      if (callback) {\n        callback(null, value);\n      }\n      resolve(value);\n    } catch (err) {\n      if (callback) {\n        callback(err);\n      }\n      reject(err);\n    }\n  });\n};\n\nconst createPromiseAll = (promises, callback, processResult): Promise<*> => {\n  return Promise.all(promises).then(\n    result => {\n      const value = processResult ? processResult(result) : null;\n      callback && callback(null, value);\n      return Promise.resolve(value);\n    },\n    errors => {\n      callback && callback(errors);\n      return Promise.reject(errors);\n    }\n  );\n};\n\nexport default class AsyncStorage {\n\n  /**\n   * Fetches `key` value.\n   */\n  static getItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.getItem(key);\n    }, callback);\n  }\n\n  /**\n   * Sets `value` for `key`.\n   */\n  static setItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.setItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Removes a `key`\n   */\n  static removeItem(key: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  }\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  static mergeItem(key: string, value: string, callback?: Function): Promise<*> {\n    return createPromise(() => {\n      mergeLocalStorageItem(key, value);\n    }, callback);\n  }\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  static clear(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      window.localStorage.clear();\n    }, callback);\n  }\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  static getAllKeys(callback?: Function): Promise<*> {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i);\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  }\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  static flushGetRequests() {}\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  static multiGet(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.getItem(key));\n    const processResult = result => result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  }\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiSet(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.setItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  static multiRemove(keys: Array<string>, callback?: Function): Promise<*> {\n    const promises = keys.map(key => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  }\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  static multiMerge(keyValuePairs: Array<Array<string>>, callback?: Function): Promise<*> {\n    const promises = keyValuePairs.map(item => AsyncStorage.mergeItem(item[0], item[1]));\n    return createPromiseAll(promises, callback);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}