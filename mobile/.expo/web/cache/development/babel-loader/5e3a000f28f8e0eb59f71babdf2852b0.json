{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport ExponentUpdates from \"./ExponentUpdates\";\nexport function reload() {\n  return _regeneratorRuntime.async(function reload$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(ExponentUpdates.reload());\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function reloadFromCache() {\n  return _regeneratorRuntime.async(function reloadFromCache$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ExponentUpdates.reloadFromCache());\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function checkForUpdateAsync() {\n  var result;\n  return _regeneratorRuntime.async(function checkForUpdateAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExponentUpdates.checkForUpdateAsync) {\n            _context3.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n        case 2:\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(ExponentUpdates.checkForUpdateAsync());\n        case 4:\n          result = _context3.sent;\n          if (result) {\n            _context3.next = 7;\n            break;\n          }\n          return _context3.abrupt(\"return\", {\n            isAvailable: false\n          });\n        case 7:\n          return _context3.abrupt(\"return\", {\n            isAvailable: true,\n            manifest: typeof result === 'string' ? JSON.parse(result) : result\n          });\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchUpdateAsync() {\n  var _ref,\n    eventListener,\n    subscription,\n    result,\n    _args4 = arguments;\n  return _regeneratorRuntime.async(function fetchUpdateAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, eventListener = _ref.eventListener;\n          if (ExponentUpdates.fetchUpdateAsync) {\n            _context4.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n        case 3:\n          if (eventListener && typeof eventListener === 'function') {\n            subscription = addListener(eventListener);\n          }\n          _context4.prev = 4;\n          _context4.next = 7;\n          return _regeneratorRuntime.awrap(ExponentUpdates.fetchUpdateAsync());\n        case 7:\n          result = _context4.sent;\n        case 8:\n          _context4.prev = 8;\n          subscription && subscription.remove();\n          return _context4.finish(8);\n        case 11:\n          if (result) {\n            _context4.next = 13;\n            break;\n          }\n          return _context4.abrupt(\"return\", {\n            isNew: false\n          });\n        case 13:\n          return _context4.abrupt(\"return\", {\n            isNew: true,\n            manifest: typeof result === 'string' ? JSON.parse(result) : result\n          });\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, [[4,, 8, 11]], Promise);\n}\nexport function clearUpdateCacheExperimentalAsync(abiVersion) {\n  return _regeneratorRuntime.async(function clearUpdateCacheExperimentalAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (ExponentUpdates.clearUpdateCacheAsync) {\n            _context5.next = 2;\n            break;\n          }\n          throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n        case 2:\n          return _context5.abrupt(\"return\", ExponentUpdates.clearUpdateCacheAsync(abiVersion));\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nvar _emitter;\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\nfunction _emitEvent(params) {\n  var newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"sources":["../../src/Updates/Updates.ts"],"names":[],"mappings":"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","sourcesContent":["import { RCTDeviceEventEmitter, UnavailabilityError } from '@unimodules/core';\nimport Constants from 'expo-constants';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\ntype Manifest = typeof Constants.manifest;\n\ntype UpdateCheckResult = { isAvailable: false } | { isAvailable: true; manifest: Manifest };\n\ntype UpdateFetchResult = { isNew: false } | { isNew: true; manifest: Manifest };\n\ntype UpdateEvent =\n  | { type: 'downloadStart' | 'downloadProgress' | 'noUpdateAvailable' }\n  | { type: 'downloadFinished'; manifest: Manifest }\n  | { type: 'error'; message: string };\n\ntype UpdateEventListener = (event: UpdateEvent) => void;\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<UpdateCheckResult> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  if (!result) {\n    return { isAvailable: false };\n  }\n\n  return {\n    isAvailable: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function fetchUpdateAsync({\n  eventListener,\n}: { eventListener?: UpdateEventListener } = {}): Promise<UpdateFetchResult> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n\n  if (!result) {\n    return { isNew: false };\n  }\n\n  return {\n    isNew: true,\n    manifest: typeof result === 'string' ? JSON.parse(result) : result,\n  };\n}\n\nexport async function clearUpdateCacheExperimentalAsync(abiVersion: string): Promise<void> {\n  if (!ExponentUpdates.clearUpdateCacheAsync) {\n    throw new UnavailabilityError('Updates', 'clearUpdateCacheAsync');\n  }\n  return ExponentUpdates.clearUpdateCacheAsync(abiVersion);\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    RCTDeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  const emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}