{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n    getState = _ref.getState,\n    navigation = _ref.navigation,\n    _setOptions = _ref.setOptions,\n    router = _ref.router,\n    emitter = _ref.emitter;\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n        rest = _objectWithoutProperties(navigation, [\"emit\"]);\n      var dispatch = function dispatch(action) {\n        var payload = typeof action === 'function' ? action(getState()) : action;\n        navigation.dispatch(typeof payload === 'object' && payload != null ? _objectSpread({\n          source: route.key\n        }, payload) : payload);\n      };\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          return dispatch(actions[name].apply(actions, arguments));\n        };\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: dispatch,\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty2({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["React","CommonActions","useNavigationCache","state","getState","navigation","setOptions","router","emitter","cache","useMemo","current","actions","actionCreators","routes","reduce","acc","route","previous","key","emit","rest","dispatch","action","payload","source","helpers","keys","name","create","options","o","isFocused","index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAMO,2BANP;AAmCA,eAAe,SAASC,kBAAT,OAUI;EAAA,IANjBC,KADA,QACAA,KADA;IAEAC,QAFA,QAEAA,QAFA;IAGAC,UAHA,QAGAA,UAHA;IAIAC,WAJA,QAIAA,UAAU;IACVC,MALA,QAKAA,MALA;IAMAC,OAAAA,QAAAA,OAAAA;EAKA,IAAMC,KAAK,GAAG,KAAK,CAACC,OAAN,CACZ;IAAA,OAAO;MAAEC,OAAO,EAAE,CAAA;IAAX,CAAP;EAAA,CADY,EAGZ,CAACP,QAAD,EAAWC,UAAX,EAAuBC,WAAvB,EAAmCC,MAAnC,EAA2CC,OAA3C,CAHY,CAAd;EAMA,IAAMI,OAAO,GAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACRL,MAAM,CAACM,cADC,CAAA,EAERZ,aAFQ,CAAb;EAKAQ,KAAK,CAACE,OAANF,GAAgB,KAAK,CAACK,MAAN,CAAaC,MAAb,CACd,UAACC,GAAD,EAAMC,KAAN,EAAgB;IACd,IAAMC,QAAQ,GAAGT,KAAK,CAACE,OAANF,CAAcQ,KAAK,CAACE,GAApBV,CAAjB;IAEA,IAAIS,QAAJ,EAAc;MAEZF,GAAG,CAACC,KAAK,CAACE,GAAP,CAAHH,GAAiBE,QAAjBF;IACD,CAHD,MAGO;MAEC,IAAEI,IAAAA,GAAkBf,UAA1B,CAAQe,IAAAA;QAASC,IAAjB,GAAA,wBAAA,CAA0BhB,UAA1B,EAAA,CAAA,MAAA,CAAA,CAAA;MAEA,IAAMiB,QAAQ,GACZC,SADID,QAAQ,CACZC,MADe,EAEZ;QACH,IAAMC,OAAO,GACX,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACnB,QAAQ,EAAT,CAArC,GAAoDmB,MADtD;QAGAlB,UAAU,CAACiB,QAAXjB,CACE,OAAOmB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,IAAI,IAA1C,GAAA,aAAA,CAAA;UACMC,MAAM,EAAER,KAAK,CAACE;QADpB,CAAA,EAC4BK,OAD5B,CAAA,GAEIA,OAHNnB,CAAAA;MAKD,CAXD;MAaA,IAAMqB,OAAO,GAAG,MAAM,CAACC,IAAP,CAAYf,OAAZ,CAAA,CAAqBG,MAArB,CACd,UAACC,GAAD,EAAMY,IAAN,EAAe;QAEbZ,GAAG,CAACY,IAAD,CAAHZ,GAAY;UAAA,OAAkBM,QAAQ,CAACV,OAAO,CAACgB,IAAD,CAAPhB,OAAAA,OAAO,YAAR,CAAtCI;QAAAA;QACA,OAAOA,GAAP;MACD,CALa,EAMd,CAAA,CANc,CAAhB;MASAA,GAAG,CAACC,KAAK,CAACE,GAAP,CAAHH,GAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EACKK,IADLL,CAAAA,EAEKU,OAFLV,CAAAA,EAGKR,OAAO,CAACqB,MAARrB,CAAeS,KAAK,CAACE,GAArBX,CAHLQ,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA;QAIEM,QAJFN,EAIEM,QAJFN;QAKEV,UAAU,EAAGwB,oBAAAA,OAAD;UAAA,OACVxB,WAAU,CAAEyB,UAAAA,CAAD;YAAA,OAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EACNA,CADM,CAAA,EAAA,CAAA,CAAA,uBAERd,KAAK,CAACE,GAAP,EAAA,aAAA,CAAA,aAAA,CAAA,CAAA,CAAA,EAAkBY,CAAC,CAACd,KAAK,CAACE,GAAP,CAAnB,CAAA,EAAmCW,OAAnC,CAAA,EAFQ;UAAA,EANdd;QAAAA;QAUEgB,SAAS,EAAE,qBAAM;UACf,IAAM7B,KAAK,GAAGC,QAAQ,EAAtB;UAEA,IAAID,KAAK,CAACW,MAANX,CAAaA,KAAK,CAAC8B,KAAnB9B,CAAAA,CAA0BgB,GAA1BhB,KAAkCc,KAAK,CAACE,GAA5C,EAAiD;YAC/C,OAAO,KAAP;UAJa;UASf,OAAOd,UAAU,GAAGA,UAAU,CAAC2B,SAAX3B,EAAH,GAA4B,IAA7C;QACD;MApBHW,CAAAA,CAAAA;IAsBD;IAED,OAAOA,GAAP;EACD,CA1Da,EA2Dd,CAAA,CA3Dc,CAAhBP;EA8DA,OAAOA,KAAK,CAACE,OAAb;AACD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\nimport type { EventMapBase, NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMapBase>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-expect-error: name is a valid key, but TypeScript is dumb\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions((o) => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (state.routes[state.index].key !== route.key) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}