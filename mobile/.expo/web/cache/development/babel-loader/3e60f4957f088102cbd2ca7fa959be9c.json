{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { nanoid } from 'nanoid/non-secure';\nimport TabRouter, { TabActions } from \"./TabRouter\";\nexport var DrawerActions = _objectSpread(_objectSpread({}, TabActions), {}, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.find(function (it) {\n    return it.type === 'drawer';\n  }));\n};\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: [].concat(_toConsumableArray(state.history), [{\n      type: 'drawer'\n    }])\n  });\n};\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n  return _objectSpread(_objectSpread({}, state), {}, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\nexport default function DrawerRouter(_ref) {\n  var openByDefault = _ref.openByDefault,\n    rest = _objectWithoutProperties(_ref, [\"openByDefault\"]);\n  var router = TabRouter(rest);\n  return _objectSpread(_objectSpread({}, router), {}, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList\n      });\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      if (partialState.stale === false) {\n        return partialState;\n      }\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList\n      });\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        type: 'drawer',\n        key: \"drawer-\".concat(nanoid())\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n          return openDrawer(state);\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n          return router.getStateForAction(state, action, options);\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["nanoid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","find","it","filter","DrawerRouter","openByDefault","rest","router","getInitialState","routeNames","routeParamList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport type {\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  ParamListBase,\n} from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n  TabActionHelpers,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  openByDefault?: boolean;\n};\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport type DrawerActionHelpers<\n  ParamList extends ParamListBase\n> = TabActionHelpers<ParamList> & {\n  /**\n   * Open the drawer sidebar.\n   */\n  openDrawer(): void;\n\n  /**\n   * Close the drawer sidebar.\n   */\n  closeDrawer(): void;\n\n  /**\n   * Open the drawer sidebar if closed, or close if opened.\n   */\n  toggleDrawer(): void;\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find((it) => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  openByDefault,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = (TabRouter(rest) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      let state = router.getInitialState({ routeNames, routeParamList });\n\n      if (openByDefault) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (openByDefault) {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (openByDefault) {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}