{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"/Users/brentvatne/code/react-native-appearance/src/index.tsx\";\nimport React, { useMemo } from 'react';\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport { EventEmitter } from 'fbemitter';\nimport { useSubscription } from 'use-subscription';\nexport * from \"./Appearance.types\";\nimport { NativeAppearance, NativeAppearanceProvider } from \"./NativeAppearance\";\nvar eventEmitter = new EventEmitter();\nvar appearancePreferences = NativeAppearance.initialPreferences;\nvar nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\nnativeEventEmitter.addListener('appearanceChanged', function (newAppearance) {\n  Appearance.set(newAppearance);\n});\nexport var Appearance = function () {\n  function Appearance() {\n    _classCallCheck(this, Appearance);\n  }\n  _createClass(Appearance, null, [{\n    key: \"getColorScheme\",\n    value: function getColorScheme() {\n      return appearancePreferences.colorScheme;\n    }\n  }, {\n    key: \"set\",\n    value: function set(preferences) {\n      var colorScheme = preferences.colorScheme;\n      if (appearancePreferences.colorScheme !== colorScheme) {\n        appearancePreferences = {\n          colorScheme: colorScheme\n        };\n        eventEmitter.emit('change', preferences);\n      }\n    }\n  }, {\n    key: \"addChangeListener\",\n    value: function addChangeListener(listener) {\n      return eventEmitter.addListener('change', listener);\n    }\n  }]);\n  return Appearance;\n}();\nexport var AppearanceProvider = function AppearanceProvider(props) {\n  return React.createElement(NativeAppearanceProvider, _extends({\n    style: {\n      flex: 1\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    }\n  }));\n};\nexport function useColorScheme() {\n  var subscription = useMemo(function () {\n    return {\n      getCurrentValue: function getCurrentValue() {\n        return Appearance.getColorScheme();\n      },\n      subscribe: function subscribe(callback) {\n        var eventSubscription = Appearance.addChangeListener(callback);\n        return function () {\n          return eventSubscription.remove();\n        };\n      }\n    };\n  }, []);\n  return useSubscription(subscription);\n}","map":{"version":3,"sources":["index.tsx"],"names":["React","useMemo","EventEmitter","useSubscription","NativeAppearance","NativeAppearanceProvider","eventEmitter","appearancePreferences","initialPreferences","nativeEventEmitter","NativeEventEmitter","addListener","newAppearance","Appearance","set","colorScheme","preferences","emit","listener","AppearanceProvider","props","flex","useColorScheme","subscription","getCurrentValue","getColorScheme","subscribe","callback","eventSubscription","addChangeListener","remove"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA;AACA,SAASC,YAAT,QAAgD,WAAhD;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA;AAGA,SAASC,gBAAT,EAA2BC,wBAA3B;AAGA,IAAMC,YAAY,GAAG,IAAIJ,YAAJ,EAArB;AAGA,IAAIK,qBAA4C,GAAGH,gBAAgB,CAACI,kBAApE;AAGA,IAAMC,kBAAkB,GAAG,IAAIC,kBAAJ,CAAuBN,gBAAvB,CAA3B;AACAK,kBAAkB,CAACE,WAAnBF,CAA+B,mBAA/BA,EAAoD,UAACG,aAAD,EAA0C;EAC5FC,UAAU,CAACC,GAAXD,CAAeD,aAAfC,CAAAA;AACD,CAFDJ,CAAAA;AAIA,OAAA,IAAaI,UAAb,GAAA,YAAA;EAAA,SAAA,UAAA,GAAA;IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA;EAAA;EAAA,YAAA,CAAA,UAAA,EAAA,IAAA,EAAA,CAAA;IAAA,GAAA,EAAA,gBAAA;IAAA,KAAA,EAAA,SAAA,cAAA,GAa2C;MACvC,OAAON,qBAAqB,CAACQ,WAA7B;IACD;EAfH,CAAA,EAAA;IAAA,GAAA,EAAA,KAAA;IAAA,KAAA,EAAA,SAAA,GAAA,CAwBaC,WAxBb,EAwBuD;MAAA,IAC7CD,WAD6C,GAC7BC,WAD6B,CAC7CD,WAD6C;MAInD,IAAIR,qBAAqB,CAACQ,WAAtBR,KAAsCQ,WAA1C,EAAuD;QACrDR,qBAAqB,GAAG;UAAEQ,WAAW,EAAXA;QAAF,CAAxBR;QACAD,YAAY,CAACW,IAAbX,CAAkB,QAAlBA,EAA4BU,WAA5BV,CAAAA;MACD;IACF;EAhCH,CAAA,EAAA;IAAA,GAAA,EAAA,mBAAA;IAAA,KAAA,EAAA,SAAA,iBAAA,CAqC2BY,QArC3B,EAqC4E;MACxE,OAAOZ,YAAY,CAACK,WAAbL,CAAyB,QAAzBA,EAAmCY,QAAnCZ,CAAP;IACD;EAvCH,CAAA,CAAA,CAAA;EAAA,OAAA,UAAA;AAAA,CAAA,EAAA;AA8CA,OAAO,IAAMa,kBAAkB,GAAlBA,SAAAA,kBAAqB,CAACC,KAAD,EAAA;EAAA,OAChC,KAAA,CAAA,aAAA,CAAC,wBAAD,EAAA,QAAA,CAAA;IAA0B,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAR;EAAjC,CAAA,EAAkDD,KAAlD,EAAA;IAAA,QAAA,EAAA;MAAA,QAAA,EAAA,YAAA;MAAA,UAAA,EAAA;IAAA;EAAA,CAAA,CAAA,CADgC;AAAA,CAA3B;AAOP,OAAO,SAASE,cAAT,GAA2C;EAChD,IAAMC,YAAY,GAAGtB,OAAO,CAC1B,YAAA;IAAA,OAAO;MACLuB,eAAe,EAAE,SAAA,eAAA,GAAA;QAAA,OAAMX,UAAU,CAACY,cAAXZ,EAAN;MAAA,CADZ;MAELa,SAAS,EAAE,SAAA,SAAA,CAACC,QAAD,EAAkC;QAC3C,IAAIC,iBAAiB,GAAGf,UAAU,CAACgB,iBAAXhB,CAA6Bc,QAA7Bd,CAAxB;QACA,OAAO,YAAA;UAAA,OAAMe,iBAAiB,CAACE,MAAlBF,EAAN;QAAA,CAAP;MACD;IALI,CAAP;EAAA,CAD0B,EAQ1B,EAR0B,CAA5B;EAWA,OAAOzB,eAAe,CAAkBoB,YAAlB,CAAtB;AACD","sourcesContent":["import React, { useMemo } from 'react';\nimport { NativeEventEmitter } from 'react-native';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport { useSubscription } from 'use-subscription';\nimport { AppearancePreferences, ColorSchemeName, AppearanceListener } from './Appearance.types';\nexport * from './Appearance.types';\n\n// Native modules\nimport { NativeAppearance, NativeAppearanceProvider } from './NativeAppearance';\n\n// Initialize the user-facing event emitter\nconst eventEmitter = new EventEmitter();\n\n// Initialize preferences synchronously\nlet appearancePreferences: AppearancePreferences = NativeAppearance.initialPreferences;\n\n// Initialize the native event emitter\nconst nativeEventEmitter = new NativeEventEmitter(NativeAppearance);\nnativeEventEmitter.addListener('appearanceChanged', (newAppearance: AppearancePreferences) => {\n  Appearance.set(newAppearance);\n});\n\nexport class Appearance {\n  /**\n   * Note: Although appearance is available immediately, it may change (e.g\n   * Dark Mode) so any rendering logic or styles that depend on this should try\n   * to call this function on every render, rather than caching the value (for\n   * example, using inline styles rather than setting a value in a\n   * `StyleSheet`).\n   *\n   * Example: `const colorScheme = Appearance.get('colorScheme');`\n   *\n   * @param {string} preference Name of preference (e.g. 'colorScheme').\n   * @returns {ColorSchemeName} Value for the preference.\n   */\n  static getColorScheme(): ColorSchemeName {\n    return appearancePreferences.colorScheme;\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * appearanceChanged event.\n   *\n   * @param {object} appearancePreferences Simple string-keyed object of\n   * appearance preferences to set.\n   */\n  static set(preferences: AppearancePreferences): void {\n    let { colorScheme } = preferences;\n\n    // Don't bother emitting if it's the same value\n    if (appearancePreferences.colorScheme !== colorScheme) {\n      appearancePreferences = { colorScheme };\n      eventEmitter.emit('change', preferences);\n    }\n  }\n\n  /**\n   * Add an event handler that is fired when appearance preferences change.\n   */\n  static addChangeListener(listener: AppearanceListener): EventSubscription {\n    return eventEmitter.addListener('change', listener);\n  }\n}\n\n/**\n * Temporarily require a Provider since the upstream implementation uses root view customizations\n * to accomplish this same behavior\n */\nexport const AppearanceProvider = (props: { children: any }) => (\n  <NativeAppearanceProvider style={{ flex: 1 }} {...props} />\n);\n\n/**\n * Subscribe to color scheme updates\n */\nexport function useColorScheme(): ColorSchemeName {\n  const subscription = useMemo(\n    () => ({\n      getCurrentValue: () => Appearance.getColorScheme(),\n      subscribe: (callback: AppearanceListener) => {\n        let eventSubscription = Appearance.addChangeListener(callback);\n        return () => eventSubscription.remove();\n      },\n    }),\n    [],\n  );\n\n  return useSubscription<ColorSchemeName>(subscription);\n}\n"]},"metadata":{},"sourceType":"module"}