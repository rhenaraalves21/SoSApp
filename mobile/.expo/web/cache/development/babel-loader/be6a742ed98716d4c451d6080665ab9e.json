{"ast":null,"code":"import { PermissionStatus } from \"./Permissions.types\";\nexport function coalesceStatuses(permissions) {\n  var statuses = Object.keys(permissions).map(function (type) {\n    return permissions[type].status;\n  });\n  statuses.sort(function (status1, status2) {\n    return _getStatusWeight(status1) - _getStatusWeight(status2);\n  });\n  return statuses[statuses.length - 1];\n}\nfunction _getStatusWeight(status) {\n  switch (status) {\n    case PermissionStatus.GRANTED:\n      return 0;\n    case PermissionStatus.DENIED:\n      return 1;\n    case PermissionStatus.UNDETERMINED:\n      return 2;\n    default:\n      return 100;\n  }\n}\nexport function coalesceExpirations(permissions) {\n  var maxExpiration = 9007199254740991;\n  var expirations = Object.keys(permissions).map(function (type) {\n    return permissions[type].expires;\n  });\n  expirations.sort(function (e1, e2) {\n    return (e1 == null || e1 === 'never' ? maxExpiration : e1) - (e2 == null || e2 === 'never' ? maxExpiration : e2);\n  });\n  return expirations[0];\n}\nexport function coalesceCanAskAgain(permissions) {\n  return Object.keys(permissions).reduce(function (canAskAgain, type) {\n    return canAskAgain && permissions[type].canAskAgain;\n  }, true);\n}\nexport function coalesceGranted(permissions) {\n  return Object.keys(permissions).reduce(function (granted, type) {\n    return granted && permissions[type].granted;\n  }, true);\n}","map":{"version":3,"sources":["../src/CoalescedPermissions.ts"],"names":[],"mappings":"AAAA,SAA8C,gBAAgB;AAE9D,OAAM,SAAU,gBAAgB,CAAC,WAA0B,EAAA;EACzD,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;IAAA,OAAI,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM;EAAA,EAAC;EAC/E,QAAQ,CAAC,IAAI,CAAC,UAAC,OAAO,EAAE,OAAO;IAAA,OAAK,gBAAgB,CAAC,OAAO,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC;EAAA,EAAC;EAE1F,OAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;AACtC;AAEA,SAAS,gBAAgB,CAAC,MAAwB,EAAA;EAIhD,QAAQ,MAAM;IACZ,KAAK,gBAAgB,CAAC,OAAO;MAC3B,OAAO,CAAC;IACV,KAAK,gBAAgB,CAAC,MAAM;MAC1B,OAAO,CAAC;IACV,KAAK,gBAAgB,CAAC,YAAY;MAChC,OAAO,CAAC;IACV;MACE,OAAO,GAAG;EAAC;AAEjB;AAEA,OAAM,SAAU,mBAAmB,CAAC,WAA0B,EAAA;EAC5D,IAAM,aAAa,GAAG,gBAAgB;EACtC,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,IAAI;IAAA,OAAI,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO;EAAA,EAAC;EACnF,WAAW,CAAC,IAAI,CACd,UAAC,EAAE,EAAE,EAAE;IAAA,OACL,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,KAAK,OAAO,GAAG,aAAa,GAAG,EAAE,KACjD,EAAE,IAAI,IAAI,IAAI,EAAE,KAAK,OAAO,GAAG,aAAa,GAAG,EAAE,CAAC;EAAA,EACtD;EAED,OAAO,WAAW,CAAC,CAAC,CAAC;AACvB;AAEA,OAAM,SAAU,mBAAmB,CAAC,WAA0B,EAAA;EAC5D,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CACpC,UAAC,WAAW,EAAE,IAAI;IAAA,OAAK,WAAW,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW;EAAA,GACnE,IAAI,CACL;AACH;AAEA,OAAM,SAAU,eAAe,CAAC,WAA0B,EAAA;EACxD,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,CACpC,UAAC,OAAO,EAAE,IAAI;IAAA,OAAK,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO;EAAA,GACvD,IAAI,CACL;AACH","sourcesContent":["import { PermissionExpiration, PermissionMap, PermissionStatus } from './Permissions.types';\n\nexport function coalesceStatuses(permissions: PermissionMap): PermissionStatus {\n  const statuses = Object.keys(permissions).map(type => permissions[type].status);\n  statuses.sort((status1, status2) => _getStatusWeight(status1) - _getStatusWeight(status2));\n  // We choose the \"heaviest\" status with the most implications\n  return statuses[statuses.length - 1];\n}\n\nfunction _getStatusWeight(status: PermissionStatus): number {\n  // In terms of weight, we treat UNDETERMINED > DENIED > GRANTED since UNDETERMINED requires the\n  // most amount of further handling (prompting for permission and then checking that permission)\n  // and GRANTED requires the least\n  switch (status) {\n    case PermissionStatus.GRANTED:\n      return 0;\n    case PermissionStatus.DENIED:\n      return 1;\n    case PermissionStatus.UNDETERMINED:\n      return 2;\n    default:\n      return 100;\n  }\n}\n\nexport function coalesceExpirations(permissions: PermissionMap): PermissionExpiration {\n  const maxExpiration = 9007199254740991; // Number.MAX_SAFE_INTEGER\n  const expirations = Object.keys(permissions).map(type => permissions[type].expires);\n  expirations.sort(\n    (e1, e2) =>\n      (e1 == null || e1 === 'never' ? maxExpiration : e1) -\n      (e2 == null || e2 === 'never' ? maxExpiration : e2)\n  );\n  // We choose the earliest expiration\n  return expirations[0];\n}\n\nexport function coalesceCanAskAgain(permissions: PermissionMap): boolean {\n  return Object.keys(permissions).reduce<boolean>(\n    (canAskAgain, type) => canAskAgain && permissions[type].canAskAgain,\n    true\n  );\n}\n\nexport function coalesceGranted(permissions: PermissionMap): boolean {\n  return Object.keys(permissions).reduce<boolean>(\n    (granted, type) => granted && permissions[type].granted,\n    true\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}