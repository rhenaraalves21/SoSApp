{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport checkLegacyPathConfig from \"./checkLegacyPathConfig\";\nexport default function getStateFromPath(path, options) {\n  var _ref;\n  var _checkLegacyPathConfi = checkLegacyPathConfig(options),\n    _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n    legacy = _checkLegacyPathConfi2[0],\n    compatOptions = _checkLegacyPathConfi2[1];\n  var initialRoutes = [];\n  if (compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens)\n    });\n  }\n  var screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  var remaining = path.replace(/\\/+/g, '/').replace(/^\\//, '').replace(/\\?.*$/, '');\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n  if (screens === undefined) {\n    var routes = remaining.split('/').filter(Boolean).map(function (segment, i, self) {\n      var name = decodeURIComponent(segment);\n      if (i === self.length - 1) {\n        return {\n          name: name,\n          params: parseQueryParams(path)\n        };\n      }\n      return {\n        name: name\n      };\n    });\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n    return undefined;\n  }\n  var configs = (_ref = []).concat.apply(_ref, _toConsumableArray(Object.keys(screens).map(function (key) {\n    return createNormalizedConfigs(legacy, key, screens, [], initialRoutes);\n  }))).sort(function (a, b) {\n    if (a.pattern.startsWith(b.pattern)) {\n      return 1;\n    }\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n    var aParts = a.pattern.split('/');\n    var bParts = b.pattern.split('/');\n    var aWildcardIndex = aParts.indexOf('*');\n    var bWildcardIndex = bParts.indexOf('*');\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n    if (aWildcardIndex === bWildcardIndex) {\n      return bParts.length - aParts.length;\n    }\n    return bWildcardIndex - aWildcardIndex;\n  });\n  if (remaining === '/') {\n    var match = configs.find(function (config) {\n      return config.path === '' && config.routeNames.every(function (name) {\n        var _configs$find;\n        return !((_configs$find = configs.find(function (c) {\n          return c.screen === name;\n        })) === null || _configs$find === void 0 ? void 0 : _configs$find.path);\n      });\n    });\n    if (match) {\n      return createNestedStateObject(match.routeNames.map(function (name, i, self) {\n        if (i === self.length - 1) {\n          return {\n            name: name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n        return {\n          name: name\n        };\n      }), initialRoutes);\n    }\n    return undefined;\n  }\n  var result;\n  var current;\n  if (legacy === false) {\n    var _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(function (c) {\n        return _objectSpread(_objectSpread({}, c), {}, {\n          regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n        });\n      })),\n      routeNames = _matchAgainstConfigs.routeNames,\n      allParams = _matchAgainstConfigs.allParams,\n      remainingPath = _matchAgainstConfigs.remainingPath;\n    if (routeNames !== undefined) {\n      remaining = remainingPath;\n      current = createNestedStateObject(createRouteObjects(configs, routeNames, allParams), initialRoutes);\n      result = current;\n    }\n  } else {\n    while (remaining) {\n      var _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n        _routeNames = _matchAgainstConfigs2.routeNames,\n        _allParams = _matchAgainstConfigs2.allParams,\n        _remainingPath = _matchAgainstConfigs2.remainingPath;\n      remaining = _remainingPath;\n      if (_routeNames === undefined) {\n        var segments = remaining.split('/');\n        _routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n      var state = createNestedStateObject(createRouteObjects(configs, _routeNames, _allParams), initialRoutes);\n      if (current) {\n        var _current2;\n        while ((_current = current) === null || _current === void 0 ? void 0 : _current.routes[current.index || 0].state) {\n          var _current;\n          current = current.routes[current.index || 0].state;\n        }\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n      current = state;\n    }\n  }\n  if (current == null || result == null) {\n    return undefined;\n  }\n  var route = findFocusedRoute(current);\n  var params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n  if (params) {\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n  return result;\n}\nvar joinPaths = function joinPaths() {\n  var _ref2;\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(paths.map(function (p) {\n    return p.split('/');\n  }))).filter(Boolean).join('/');\n};\nvar matchAgainstConfigs = function matchAgainstConfigs(remaining, configs) {\n  var routeNames;\n  var allParams;\n  var remainingPath = remaining;\n  var _loop = function _loop(config) {\n    if (!config.regex) {\n      return \"continue\";\n    }\n    var match = remainingPath.match(config.regex);\n    if (match) {\n      routeNames = _toConsumableArray(config.routeNames);\n      var paramPatterns = config.pattern.split('/').filter(function (p) {\n        return p.startsWith(':');\n      });\n      if (paramPatterns.length) {\n        allParams = paramPatterns.reduce(function (acc, p, i) {\n          var value = match[(i + 1) * 2].replace(/\\//, '');\n          acc[p] = value;\n          return acc;\n        }, {});\n      }\n      remainingPath = remainingPath.replace(match[1], '');\n      return \"break\";\n    }\n  };\n  for (var _iterator = _createForOfIteratorHelperLoose(configs), _step; !(_step = _iterator()).done;) {\n    var config = _step.value;\n    var _ret = _loop(config);\n    if (_ret === \"continue\") continue;\n    if (_ret === \"break\") break;\n  }\n  return {\n    routeNames: routeNames,\n    allParams: allParams,\n    remainingPath: remainingPath\n  };\n};\nvar createNormalizedConfigs = function createNormalizedConfigs(legacy, screen, routeConfig) {\n  var routeNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var initials = arguments.length > 4 ? arguments[4] : undefined;\n  var parentPattern = arguments.length > 5 ? arguments[5] : undefined;\n  var configs = [];\n  routeNames.push(screen);\n  var config = routeConfig[screen];\n  if (typeof config === 'string') {\n    var pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    var _pattern2;\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        _pattern2 = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n        _pattern2 = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n      configs.push(createConfigItem(legacy, screen, routeNames, _pattern2, config.path, config.parse));\n    }\n    if (config.screens) {\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens)\n        });\n      }\n      Object.keys(config.screens).forEach(function (nestedConfig) {\n        var _pattern;\n        var result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern = _pattern2) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push.apply(configs, _toConsumableArray(result));\n      });\n    }\n  }\n  routeNames.pop();\n  return configs;\n};\nvar createConfigItem = function createConfigItem(legacy, screen, routeNames, pattern, path, parse) {\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  var regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(function (it) {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n    }\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen: screen,\n    regex: regex,\n    pattern: pattern,\n    path: path,\n    routeNames: _toConsumableArray(routeNames),\n    parse: parse\n  };\n};\nvar findParseConfigForRoute = function findParseConfigForRoute(routeName, flatConfig) {\n  for (var _iterator2 = _createForOfIteratorHelperLoose(flatConfig), _step2; !(_step2 = _iterator2()).done;) {\n    var config = _step2.value;\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n  return undefined;\n};\nvar findInitialRoute = function findInitialRoute(routeName, initialRoutes) {\n  for (var _iterator3 = _createForOfIteratorHelperLoose(initialRoutes), _step3; !(_step3 = _iterator3()).done;) {\n    var config = _step3.value;\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\nvar createStateObject = function createStateObject(initialRoute, routeName, params, isEmpty) {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params: params\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params: params\n        }]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params: params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params: params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\nvar createNestedStateObject = function createNestedStateObject(routes, initialRoutes) {\n  var state;\n  var route = routes.shift();\n  var initialRoute = findInitialRoute(route.name, initialRoutes);\n  state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n  if (routes.length > 0) {\n    var nestedState = state;\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n      var nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n    }\n  }\n  return state;\n};\nvar createRouteObjects = function createRouteObjects(configs, routeNames, allParams) {\n  return routeNames.map(function (name) {\n    var config = configs.find(function (c) {\n      return c.screen === name;\n    });\n    var params;\n    if (allParams && (config === null || config === void 0 ? void 0 : config.path)) {\n      var pattern = config.path;\n      if (pattern) {\n        var paramPatterns = pattern.split('/').filter(function (p) {\n          return p.startsWith(':');\n        });\n        if (paramPatterns.length) {\n          params = paramPatterns.reduce(function (acc, p) {\n            var key = p.replace(/^:/, '').replace(/\\?$/, '');\n            var value = allParams[p];\n            if (value) {\n              acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;\n            }\n            return acc;\n          }, {});\n        }\n      }\n    }\n    if (params && Object.keys(params).length) {\n      return {\n        name: name,\n        params: params\n      };\n    }\n    return {\n      name: name\n    };\n  });\n};\nvar findFocusedRoute = function findFocusedRoute(state) {\n  var _current4;\n  var current = state;\n  while ((_current3 = current) === null || _current3 === void 0 ? void 0 : _current3.routes[current.index || 0].state) {\n    var _current3;\n    current = current.routes[current.index || 0].state;\n  }\n  var route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\nvar parseQueryParams = function parseQueryParams(path, parseConfig) {\n  var query = path.split('?')[1];\n  var params = queryString.parse(query);\n  if (parseConfig) {\n    Object.keys(params).forEach(function (name) {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n  return Object.keys(params).length ? params : undefined;\n};","map":{"version":3,"sources":["getStateFromPath.tsx"],"names":["escape","queryString","checkLegacyPathConfig","getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","connectedRoutes","Object","keys","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","key","createNormalizedConfigs","sort","a","b","pattern","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","match","find","config","routeNames","every","c","screen","parse","result","current","allParams","remainingPath","matchAgainstConfigs","regex","RegExp","source","createRouteObjects","segments","shift","join","state","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","paramPatterns","reduce","acc","value","routeConfig","initials","parentPattern","createConfigItem","exact","Error","forEach","nestedConfig","pop","it","routeName","flatConfig","findInitialRoute","includes","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseConfig","query"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  connectedRoutes: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * Example:\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens),\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return 1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routeNames !== undefined) {\n      // This will always be empty if full path matched\n      remaining = remainingPath;\n      current = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n        remaining,\n        configs\n      );\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routeNames === undefined) {\n        const segments = remaining.split('/');\n\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routeNames: string[] | undefined;\n  let allParams: Record<string, any> | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      routeNames = [...config.routeNames];\n\n      const paramPatterns = config.pattern\n        .split('/')\n        .filter((p) => p.startsWith(':'));\n\n      if (paramPatterns.length) {\n        allParams = paramPatterns.reduce<Record<string, any>>((acc, p, i) => {\n          const value = match![(i + 1) * 2].replace(/\\//, ''); // The param segments appear every second item starting from 2 in the regex match result\n\n          acc[p] = value;\n\n          return acc;\n        }, {});\n      }\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routeNames, allParams, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens),\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName\n        ? undefined\n        : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  routeName: string,\n  params: Record<string, any> | undefined,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { name: routeName as string, params }],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params }],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute },\n          { name: routeName as string, params, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: { name: string; params?: object }[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as { name: string; params?: object };\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n\n  state = createStateObject(\n    initialRoute,\n    route.name,\n    route.params,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as { name: string; params?: object })) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route.name,\n        route.params,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst createRouteObjects = (\n  configs: RouteConfig[],\n  routeNames: string[],\n  allParams?: Record<string, any>\n) =>\n  routeNames.map((name) => {\n    const config = configs.find((c) => c.screen === name);\n\n    let params: object | undefined;\n\n    if (allParams && config?.path) {\n      const pattern = config.path;\n\n      if (pattern) {\n        const paramPatterns = pattern\n          .split('/')\n          .filter((p) => p.startsWith(':'));\n\n        if (paramPatterns.length) {\n          params = paramPatterns.reduce<Record<string, any>>((acc, p) => {\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            const value = allParams![p];\n\n            if (value) {\n              acc[key] =\n                config.parse && config.parse[key]\n                  ? config.parse[key](value)\n                  : value;\n            }\n\n            return acc;\n          }, {});\n        }\n      }\n    }\n\n    if (params && Object.keys(params).length) {\n      return { name, params };\n    }\n\n    return { name };\n  });\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]},"metadata":{},"sourceType":"module"}