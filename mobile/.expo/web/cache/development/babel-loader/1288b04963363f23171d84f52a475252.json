{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from \"./BaseRouter\";\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n        routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            var _action$payload = action.payload,\n              name = _action$payload.name,\n              key = _action$payload.key,\n              params = _action$payload.params;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: state.index + 1,\n              routes: [].concat(_toConsumableArray(state.routes), [{\n                key: action.payload.key === undefined ? \"\".concat(action.payload.name, \"-\").concat(nanoid()) : action.payload.key,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }])\n            });\n          }\n          return null;\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n              var routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: routes.length - 1,\n                routes: routes\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.key || action.payload.name && state.routeNames.includes(action.payload.name)) {\n            var _index2 = -1;\n            if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(state, {\n                type: 'PUSH',\n                payload: {\n                  key: action.payload.key,\n                  name: action.payload.name,\n                  params: action.payload.params\n                }\n              }, options);\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [action.payload.params !== undefined ? _objectSpread(_objectSpread({}, state.routes[_index2]), {}, {\n                params: _objectSpread(_objectSpread({}, state.routes[_index2].params), action.payload.params)\n              }) : state.routes[_index2]])\n            });\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":{"version":3,"sources":["StackRouter.tsx"],"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","max","concat","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState = NavigationState & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            return {\n              ...state,\n              index: state.index + 1,\n              routes: [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key === undefined\n                      ? `${action.payload.name}-${nanoid()}`\n                      : action.payload.key,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ],\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.key ||\n            (action.payload.name &&\n              state.routeNames.includes(action.payload.name))\n          ) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(\n                state,\n                {\n                  type: 'PUSH',\n                  payload: {\n                    key: action.payload.key,\n                    name: action.payload.name,\n                    params: action.payload.params,\n                  },\n                },\n                options\n              );\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                action.payload.params !== undefined\n                  ? {\n                      ...state.routes[index],\n                      params: {\n                        ...state.routes[index].params,\n                        ...action.payload.params,\n                      },\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}